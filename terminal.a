    .p816
    .a16
    .i16


    .include "hw/cpu.inc"
    .include "hw/chipset.inc"


;
; Emulates a dumb teletype.
;
; Footnote:
; It amazes me that we are still emulating -teletypes-.  Commodore has gone
; the furthest in advancing the state of the art in textual user interfaces
; by implementing a crude text editor as their basic UI.  At some point in
; the future, I will revisit this idea; it's what I strove for in the orig-
; inal Kestrel-2 ROMs, but never fully realized.
;
; Some day...
;


    .rodata

    ; The font used to draw characters to the screen.  Arranged as a 2048x8
    ; monochrome bitmap.

romFont:
    .incbin "font.bin"


    .bss

    ; Keyboard scancode last detected
lastKeyPressed:
    .res 2

    ; Number of raw keyboard events since last tioGetKey
rawKeyEvents:
    .res 2

    ; The current shift status bits.  The flags are laid out as follows:
    ; BIT  0: left shift
    ;      1: right shift
    ;      2: left control
    ;      3: right control
    ;      4: left alt
    ;      5: right alt
    ;      6: left logo
    ;      7: right logo
    ;      8: reserved for (currently non-existant) left menu
    ;      9: right menu
    ;  10-13: 0
    ;     14: NUM-lock
    ;     15: CAPS-lock
.export shiftStatus
shiftStatus:
    .res 2

    ; The current (x,y) cursor position.
cx:     .res 2      ; invariant: 0 <= x < right
cy:     .res 2      ; invariant: 0 <= y < bottom

    ; Non-zero if the cursor is obscured from the screen.
hidden: .res 2      ; invariant: 0 <= hidden <= 65535

    ; Non-zero if the cursor is physically rendered to the screen.
    ; This is distinct from the cursor hiddenness, because the cursor
    ; may be visible but not drawn at the current moment (it's a
    ; blinking cursor).
cursorIsDrawn: .res 2


RIGHT   = 80
BOTTOM  = 60

    ; Pointer to a 2048x8 pixel bitmap containing the font to draw with.
    ; All glyphs are 8x8 pixels in size.  A long pointer permits the
    ; font to appear anywhere in the CPU's address space.
_font:  .res 4


    .code

.export tioInitialize
.proc tioInitialize
    pha

    ; initialize the MGIA chip for rendering a VGA-standard image.

    lda #800
    sta CCHZTL
    lda #525
    sta CCVRTL
    lda #$025F
    sta CCSYWD

    ; set the display to the (hopefully) center of the view'ers monitor.

    lda #140
    sta VIHZST
    lda #780
    sta VIHZEN
    lda #34
    sta VIVRST
    lda #514
    sta VIVREN
    inc
    sta CCVRLI

    ; initialize cursor position, display font, and other details.

    stz cx
    stz cy
    stz hidden
    lda #romFont
    sta _font
    stz _font+2
    pla
    rts
.endproc


.export tioTypeCharacter
.proc tioTypeCharacter
    jsr tioHideCursor
    jsr i_TypeCharacter
    jmp tioShowCursor
.endproc
.proc i_TypeCharacter
    ; Prints a single character to the screen.
    ;
    ; Preconditions:
    ;   A[7:0] = character to plot
    ;   A[15:8] ignored.
    ;
    ;   Framebuffer established using _wide, _setFramebuffer, et. al.
    ;   Cursor window established: see _setWindowOrigin, _setWindowExtent.
    ;   Cursor position previously established; see _setXY.
    ;
    ; Post-conditions:
    ;   A, X, Y unchanged.
    ;   Character displayed.  Screen scrolled if appropriate.

    pha
    and #$00FF
    jsr i_PlotGlyph
    jsr i_CursorRight
    pla
    rts
.endproc

.export tioSetXY
.proc tioSetXY
    jsr tioHideCursor
    jsr i_SetXY
    jmp tioShowCursor
.endproc
.proc i_SetXY
    ; Moves the cursor to an absolute position on the screen.
    ;
    ; Pre-conditions:
    ;   A = character column
    ;   Y = character row
    ;
    ; Post-conditions:
    ;   0 <= cx < right
    ;   0 <= cy < bottom

    pha

    sta cx
    sty cy

    lda #RIGHT-1
    cmp cx
    bcs cx_lt_right     ; right-1 >= cx
    sta cx
    ; cx = right-1

cx_lt_right:
    ; cx <= right-1
    ; cx < right
    ; 0 <= cx < right

    lda #BOTTOM-1
    cmp cy
    bcs cy_le_bottom    ; bottom-1 >= cy
    sta cy
    ; cy = bottom-1

cy_le_bottom:
    ; cy <= bottom-1
    ; cy < bottom
    ; 0 <= cy < bottom

    pla
    rts
.endproc

.proc i_CursorOffsetInBitmap
    ; Compute the byte offset in the frame buffer corresponding to the cursor
    ; position.
    ;
    ; Pre-conditions:
    ;   0 <= cx < right
    ;   0 <= cy < bottom
    ;   bitmap size < 65536 bytes
    ;
    ; post-conditions:
    ;   A = offset into bitmap corresponding to character position (cx,cy)
    ;   0 <= A < size of bitmap
    ;
    ; Note: I'm using a slow, but effective method for multiplication by
    ; repeated sums.  Since I do not anticipate a Y coordinate in excess
    ; of 59 very often, I think this is a reasonable tradeoff to make between
    ; getting the software out the door soon versus producing correct
    ; software.

    phy             ; S = [Y]

    ; 8*(cy * width) + cx < bitmap size

    lda #0          ; offset = 0
    ldy cy          ; Y >= 0
    bra L2
L1: clc             ; Y >= 1
    adc #640        ; offset = 8*n*width, 0 <= n < cy
    dey             ; Y >= 0
L2: bne L1          ; invariant: Y /= 0
    ; Y = 0
    ; offset = 8*(cy * width), offset < bitmap size
    ; offset + cx < bitmap size
    clc
    adc cx
    ; offset = 8*(width * cy) + cx, offset < bitmap size

    ply             ; S = []
    rts
.endproc

.export tioCursorRight
.proc tioCursorRight
    jsr tioHideCursor
    jsr i_CursorRight
    jmp tioShowCursor
.endproc
.proc i_CursorRight
    ; Advance the cursor right one character.
    ;
    ; Pre-conditions:
    ;   0 <= cx < right
    ;   0 <= cy < bottom
    ;
    ; post-conditions:
    ;   0 <= cx < right
    ;   0 <= cx < bottom

    pha                     ; S = [A]
    lda cx
    inc
    cmp #RIGHT
    bcs cx_1_ge_right       ; (cx+1) >= right
                            ; (cx+1) < right
    sta cx                  ; cx = old cx + 1; 0 <= cx < right
    pla                     ; S = []
    rts

cx_1_ge_right:              ; S = [A], (cx+1) >= right
    stz cx                  ; cx = 0; 0 <= cx < right
    pla                     ; S = []
    jmp i_CursorDown
.endproc

.export tioCursorLeft
.proc tioCursorLeft
    jsr tioHideCursor
    jsr i_CursorLeft
    jmp tioShowCursor
.endproc

.proc i_CursorLeft
    ; Advance the cursor left one character.
    ;
    ; pre-conditions:
    ;   0 <= cx < right
    ;
    ; post-conditions:
    ;   0 <= cx < old cx < right

    pha
    lda cx              ; 0 <= cx < right
    beq flushLeft       ; 0 = cx; already done.
    dec                 ; 0 < cx-1 ... 0 <= cx
    sta cx
    ; 0 <= cx < right
flushLeft:
    pla
    rts
.endproc

.export tioCursorDown
.proc tioCursorDown
    jsr tioHideCursor
    jsr i_CursorDown
    jmp tioShowCursor
.endproc

.export tioCarriageReturn
.proc tioCarriageReturn
    jsr tioHideCursor
    jsr i_CarriageReturn
    jmp tioShowCursor
.endproc
.proc i_CarriageReturn
    ; Affect the cursor so as to perform a carriage return.
    ;
    ; pre-conditions:
    ;   0 <= cy < bottom
    ;
    ; post-conditions:
    ;   cx = left
    ;   0 <= cy < bottom
    ;   old cy <= cy <= old cy+1

    stz cx
    ; cx = left, S = []
.endproc
    ; fall through
.proc i_CursorDown
    ; Move the cursor down one line.
    ;
    ; This procedure will scroll the screen as required.
    ;
    ; pre-conditions:
    ;   0 <= cy < bottom
    ;
    ; post-conditions:
    ;   0 <= old cy <= cy <= old cy + 1 < bottom

    ; S = []
    pha
    ; S = [A]

    ; 0 <= cy < bottom
    lda cy
    inc
    cmp #BOTTOM
    bcs cy_1_ge_bottom  ; (cy+1) >= bottom
    sta cy
    ; old cy <= cy <= old cy+1
    ; 0 <= cy < bottom
    pla
    ; S = []
    rts

cy_1_ge_bottom:
    ; S = [A]
    ; 0 <= cy < bottom
    ; cy+1 = bottom
    pla
    ; S = []
.endproc
    ; fall through again!
.proc i_VerticalScroll
    ; Performs a vertical scroll of the bitmapped framebuffer.
    ;
    ; Pre-conditions:
    ;   640x480 monochrome bitmap, with progressive memory layout.
    ;
    ; Post-conditions:
    ;   0th row discarded.
    ;   1st through 58th rows moved up one row.
    ;   59th visual row cleared to all black.

    phb
    pha
    phx
    phy

    lda #37760              ; scroll the entire bitmap up.
    ldx #640
    ldy #0
    mvn $FE, $FE

    ; As a side-effect of the MVN instruction, B = $FE.  All 16-bit memory
    ; accesses occurs in frame buffer now.

    ldx #37760              ; Clear bottom line of the screen
    lda #0
    sta 0,x
    ldy #37761
    lda #640
    mvn $FE, $FE

    ply
    plx
    pla
    plb
    rts
.endproc

.proc i_PlotGlyph
    ; Plots a character at the current cursor position.
    ;
    ; Preconditions:
    ;   0 <= A < 256; A = character to display
    ;   _font points to a 2048 x 8 bitmap containing character glyphs.

    pha
    phx
    phy
    phd

    ; S = [D, Y, X, A]

    pea $00FE
    jsr i_CursorOffsetInBitmap
    pha

    ; S = [p, D, Y, X, A], where p = pointer of glyph in framebuffer

    lda _font+2
    pha
    lda _font
    clc
    adc 13,s    ; use character specified in A on entry; 0 <= (13,s) < 256
    pha

    tsc
    tcd

    ; S = [g, p, D, Y, X, A ], where g = pointer to glyph in font bitmap.

p   =   5
g   =   1

    ldx #8
    ldy #0

L1: ; invariant: X >= 1, where X = remaining number of raster lines left
    ;   y = 0
    ;   _font <= g < (_font + 2048)
    ;   _frame <= p < (_frame + size of bitmap)

    AX8
    lda [g],y   ; If alternative visual effects desired, this is the code
    sta [p],y   ; you'd change.
    AX16

    ;   ((X-1 > 0) & (g+256 < (_font + 2048))) | ((X-1 = 0) & (g+256 >= (_font + 2048)))
    inc g+1
    ;   ((X-1 > 0) & (g < (_font + 2048))) | ((X-1 = 0) & (g >= (_font + 2048)))

    ;   (p + _width) < (_frame + size of bitmap)
    clc
    lda #RIGHT
    adc p
    sta p
    ;   p < (_frame + size of bitmap)

    ;   ((X-1 > 0) & (g < (_font + 2048))) | ((X-1 = 0) & (g >= (_font + 2048)))
    dex 
    ;   ((X > 0) & (g < (_font + 2048))) | ((X = 0) & (g >= (_font + 2048)))
    bne L1
    ; X = 0 & g >= (_font + 2048) & S = [g, p, D, Y, X, A]

    ; S = [g, p, D, Y, X, A]
    tsc
    clc
    adc #8
    tcs
    ; S = [D, Y, X, A]

    pld
    ply
    plx
    pla
    rts
.endproc

.export tioShowCursor
.proc tioShowCursor
    ; Decrements the hide-count for the cursor.  If non-zero, the cursor is
    ; not visible to the user.  Otherwise, the cursor will be rendered.
    ;
    ; pre-conditions:
    ;   0 <= hidden <= 65535
    ;
    ; post-conditions:
    ;   0 <= hidden <= old hidden <= 65535

    pha
    lda hidden
    beq alreadyZero     ; 0 = hidden
    ; 0 < hidden
    ; 0 <= hidden-1
    dec
    ; 0 <= hidden
    sta hidden
alreadyZero:
    ; 0 <= hidden

    jsr tioDrawCursor
    pla
    rts
.endproc

.export tioHideCursor
.proc tioHideCursor
    ; Increments the hide-count for the cursor.
    ;
    ; pre-conditions:
    ;   0 <= hidden <= 65535
    ;
    ; post-conditions:
    ;   0 <= old hidden <= hidden <= 65535

    pha
    lda hidden
    cmp #-1
    beq alreadyMaxedOut     ; hidden = 65535
    ; hidden < 65535
    ; hidden+1 <= 65535
    inc
    ; hidden <= 65535
    sta hidden
alreadyMaxedOut:
    ; hidden <= 65535
    jsr tioEraseCursor
    pla
    rts
.endproc

.export tioToggleCursor
.proc tioToggleCursor
    ; If the cursor is visible, alternate between (in)visible
    ; states, giving the illusion of a blinking cursor over time.

    pha
    lda #0
    jsr i_AffectCursor
    pla
    rts
.endproc

.export tioDrawCursor
.proc tioDrawCursor
    ; Guarantee the cursor is drawn on the screen.

    pha
    lda #8
    jsr i_AffectCursor
    pla
    rts
.endproc

.export tioEraseCursor
.proc tioEraseCursor
    pha
    lda #16
    jsr i_AffectCursor
    pla
    rts
.endproc

.proc i_AffectCursor
    ; pre-conditions:
    ;   A[2:0] = 0
    ;   A[4:3] = operation sub-table ID (00 = toggle, 01 = draw, 10 = erase)

    ; S = []
    phx
    ; S = [X]

    ; A[2] = 0
    ldx cursorIsDrawn
    beq cursorIsErased
    ora #$04
cursorIsErased:
    ; A[2] = 1 if cursor is currently drawn on the screen

    ; A[1] = 0
    ldx hidden
    beq cursorIsVisible
    ora #$02
cursorIsVisible:
    ; A[1] = 1 if cursor is hidden from the user

    ; A[4:3] = command ID
    ; A[2] = 1 if cursor is currently drawn on the screen
    ; A[1] = 1 if cursor is hidden from the user (see tioShowCursor, et. al.)
    ; A[0] = 0
    tax
    jmp (J,x)
    ;       +--------------------------  visible and erased
    ;       |      +-------------------  hidden and erased
    ;       |      |       +-----------  visible and drawn
    ;       |      |       |       +---  hidden and drawn
    ;       |      |       |       |
J:  .word _draw, _noop, _erase, _erase      ; toggle actions
    .word _draw, _noop, _noop,  _noop       ; draw actions
    .word _noop, _noop, _erase, _erase      ; erase actions

_draw:
    lda #-1
    sta cursorIsDrawn
    jsr i_XORCursor
    ; S = [X]
    plx
    rts

_erase:
    stz cursorIsDrawn
    jsr i_XORCursor

_noop:
    ; S = [X]
    plx
    rts

.endproc

.proc i_XORCursor
    ; Toggles the cursor's image on the screen.

    pha
    phx
    phy
    phd
    ; S = [D,Y,X,A]

    pea $00FE
    jsr i_CursorOffsetInBitmap
    pha
    ; S = [p,D,Y,X,A]

    tsc
    tcd

    ldy #0
    ldx #8
L:  lda [1],y
    eor #$FF
    sta [1],y
    tya
    clc
    adc #80
    tay
    dex
    bne L

    ; S = [p, D, Y, X, A]
    plx
    plx
    ; S = [D,Y,X,A]
    pld
    ply
    plx
    pla
    rts
.endproc

.export tioClear
.proc tioClear
    jsr tioHideCursor
    jsr i_Clear
    jmp tioShowCursor
.endproc

.proc i_Clear
    ; Clears the screen; does NOT alter cursor position.

    pha
    phb
    lda #0
    sta $FE0000
    tax
    lda #38400
    ldy #1
    mvn $FE, $FE
    plb
    pla
    rts
.endproc

.export tioHome
.proc tioHome
    ; Homes the cursor; short for invoking tioSetXY with (0,0) coordinates.

    pha
    phy
    lda #0
    tay
    jsr tioSetXY
    ply
    pla
    rts
.endproc

.export tioTypeString
.proc tioTypeString
    jsr tioHideCursor
    jsr i_TypeString
    jmp tioShowCursor
.endproc

.proc i_TypeString
    ; Preconditions:
    ;   X = address of the string to print
    ;   Y = number of characters to print
    ;
    ;   Note that character codes like $0D (carriage return) or $0A
    ;   (line feed) are NOT INTERPRETED by this routine.
    ;
    ; Postconditions:
    ;   All register values preserved.

    pha
    phx
    phy

    ; Y >= 0
    cpy #$0000
    bra L1
L0: ; Y-1 >= 0
    lda 0,x
    and #$00FF
    jsr i_TypeCharacter
    inx
    dey
    ; Y >= 0
L1: bne L0
    ; Y = 0

    ply
    plx
    pla
    rts
.endproc

.export tioRawKeyEvent
.proc tioRawKeyEvent
    ; Notify the terminal emulation of a raw keyboard event of some kind.
    ;
    ; Pre-conditions:
    ;   Called from inside interrupt handler or similar keyboard-related
    ;   driver service.
    ;
    ;   A[15]   = 1 if key was pressed; 0 otherwise.
    ;   A[14:7] = 0
    ;   A[6:0]  = raw key scancode
    ;
    ;   rawKeyEvents < 65535
    ;
    ; Post-conditions:
    ;   tioGetKey guaranteed not to block.
    ;   tioGetKey would return raw scancode.
    ;
    ;   rawKeyEvents <= 65535

    inc rawKeyEvents
    sta lastKeyPressed
    rts
.endproc

.export tioGetKey
.proc tioGetKey
    ; Acquires the last RAW keyboard event.
    ;
    ; Pre-conditions:
    ;   An interrupt handler installed to watch over keyboard events.
    ;   It must invoke tioRawKeyEvent when a keyboard press is detected.
    ;   Interrupts enabled.
    ;
    ; Post-conditions without keyboard interrupt handler OR interrupts disabled:
    ;   Deadlock.
    ;
    ; Post-conditions with interrupt handler:
    ;   Blocks until a raw keyboard scancode becomes available.
    ;   A = key code retrieved.
    ;   shiftStatus updated.

L:  lda rawKeyEvents
    beq L
    php
    sei
    lda lastKeyPressed
    stz rawKeyEvents
    plp


    ; update the shift status flags
    pha
    phx
    ; S = [X, keycode]

    ldx #0      ; let X = 2*index in...
    ; index = 0
L1: ; INVARIANT: 0 <= index < 22
    ; index+1 <= 22
    lda shiftCmpTable,x
    cmp 3,s
    beq shiftDetected
    inx
    inx         ; index <= 22
    cpx #44
    bcc L1      ; index < 22
    ; index = 22
    ; keycode not in shiftTable
    ; shiftStatus = old shiftStatus
    ; ((keycode in shiftTable[DOWN_RANGE]) & ((shiftStatus and shiftTable[keycode]) /= 0)
    ;  and (keycode in shiftTable[UP_RANGE]) & ((shiftStatus and shiftTable[keycode]) = 0)
    ;  and (keycode not in shiftTable) & (shiftStatus = old shiftStatus))
    ; S = [X, keycode]
    plx
    pla
    rts

shiftDetected:
    ; S = [X, keycode]
    ; X = 2*index; 0 <= index < 22
    lda shiftStatus
    and andTable,x
    ora orTable,x
    sta shiftStatus
    ; ((keycode in shiftTable[DOWN_RANGE]) & ((shiftStatus and shiftTable[keycode]) /= 0)
    ;  and (keycode in shiftTable[UP_RANGE]) & ((shiftStatus and shiftTable[keycode]) = 0)
    ;  and (keycode not in shiftTable) & (shiftStatus = old shiftStatus))
    ; S = [X, keycode]
    plx
    pla
    rts

shiftCmpTable:
    ;     LShift RShift LCtrl  RCtrl  LAlt   RAlt   LLogo  RLogo  RMenu  CAPS   NUMLK
    .word $8032, $803E, $8025, $806D, $8040, $8071, $8073, $8074, $8075, $8042, $804D     ; DOWN
    .word $0032, $003E, $0025, $006D, $0040, $0071, $0073, $0074, $0075, $0042, $004D     ; UP

orTable:
    .word $0001, $0002, $0004, $0008, $0010, $0020, $0040, $0080, $0200, $8000, $4000     ; DOWN
    .word $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000     ; UP

andTable:
    .word $FFFF, $FFFF, $FFFF, $FFFF, $FFFF, $FFFF, $FFFF, $FFFF, $FFFF, $FFFF, $FFFF     ; DOWN
    .word $FFFE, $FFFD, $FFFB, $FFF7, $FFEF, $FFDF, $FFBF, $FF7F, $FDFF, $7FFF, $BFFF     ; UP
.endproc

.export tioTypeHex16
.proc tioTypeHex16
    ; Displays a hexadecimal, 16-bit quantity.
    ;
    ; Pre-conditions:
    ;   A[0:15] = value to print
    ;
    ; Post-conditions:
    ;   X, Y preserved.  Text displayed on screen with cursor updated.
    ;   A = last ASCII character printed

    pha
    xba
    jsr tioTypeHex8
    pla
.endproc
    ; fall-through
.export tioTypeHex8
.proc tioTypeHex8
    ; Displays a hexadecimal, 8-bit quantity.
    ;
    ; Pre-conditions:
    ;   A[0:7] = value to print
    ;
    ; Post-conditions:
    ;   X, Y preserved.  Text displayed on screen with cursor updated.
    ;   A = last ASCII character printed

    pha
    lsr
    lsr
    lsr
    lsr
    jsr i_TypeHex4
    pla
.endproc
    ; fall-through
.proc i_TypeHex4
    ; Displays a 4-bit hexadecimal value.
    ;
    ; Pre-conditions:
    ;   A[0:3] = value to print
    ;
    ; Post-conditions:
    ;   X, Y preserved.  Text displayed on screen with cursor updated.
    ;   A = ASCII character corresponding to the nybble printed.

    phx
    and #$000F
    tax
    lda hextable,x
    plx
    jmp tioTypeCharacter

hextable:
    .byte "0123456789ABCDEF"
.endproc

.export tioShiftStatus
.proc tioShiftStatus
    lda shiftStatus
    rts
.endproc

.export tioAsciiCode
.proc tioAsciiCode
    ; Converts a raw keycode acquired from tioGetKey into an ASCII
    ; value.
    ;
    ; Pre-conditions:
    ;   A = raw key code
    ;
    ; Post-conditions:
    ;   A = ASCII code if successful; -1 otherwise.
    ;   X, Y unmodified.
    ;   Flags set.

    bit #$8000
    bne keyDown
    lda #$FFFF
    rts

keyDown:
    phx
    and #$007F
    pha
    ; S = [rawCode, X]

    lda shiftStatus
    bit #$000C
    beq tryShift
    lda #$0200
    ora 1,s
    sta 1,s
    bra noShiftKeysPressed
tryShift:
    bit #$0003
    beq noShiftKeysPressed
    lda #$0100
    ora 1,s
    sta 1,s
noShiftKeysPressed:
    ; S = [tableOffset, X]

    plx
    lda translationTable-1,x  ; -1 pointer bias makes testing the high bit easy.
    bmi notAscii
    ; S = [X]
    ; A = 256*asciiCode+n, where 0 <= n < 256

    xba
    and #$00FF
    pha
    ; S = [asciiCode, X]

    lda shiftStatus
    and #$8000
    beq noCtrlCapsLock

    lda 1,s
    cmp #$0061
    bcc tryCapitals         ; asciiValue < $61 ('a')
    cmp #$007B
    bcs tryCapitals         ; asciiValue > $7A ('z')
    eor #$0020
    sta 1,s
    bra noCtrlCapsLock

tryCapitals:
    cmp #$0041              ; asciiValue < $41 ('A')
    bcc noCtrlCapsLock
    cmp #$005B              ; asciiValue > $5A ('Z')
    bcs noCtrlCapsLock
    eor #$0020
    sta 1,s

noCtrlCapsLock:

    ; S = [asciiCode, X]
    pla
    plx
    ora #$0000
    rts

notAscii:
    ; S = [X]
    lda #$FFFF
    plx
    ora #$0000
    rts

translationTable:
    ;
    ; Unshifted
    ;
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +00
    .byte   $FF, $1B, '1', '2', '3', '4', '5', '6'      ; +08
    .byte   '7', '8', '9', '0', '-', '=', $08, $09      ; +10
    .byte   'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'      ; +18
    .byte   'o', 'p', '[', ']', $0D, $FF, 'a', 's'      ; +20
    .byte   'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'      ; +28
    .byte   "'", '`', $FF, '\', 'z', 'x', 'c', 'v'      ; +30
    .byte   'b', 'n', 'm', ',', '.', '/', $FF, '*'      ; +38
    .byte   $FF, $20, $FF, $FF, $FF, $FF, $FF, $FF      ; +40
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, '7'      ; +48
    .byte   '8', '9', '-', '4', '5', '6', '+', '1'      ; +50
    .byte   '2', '3', '0', '.', $FF, $FF, $FF, $FF      ; +58
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +60
    .byte   $FF, $FF, $FF, $FF, $0D, $FF, $FF, $FF      ; +68
    .byte   '/', $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +70
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +78
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +80
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +88
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +90
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +98
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +A0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +A8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +B0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +B8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +C0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +C8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +D0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +D8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +E0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +E8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +F0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +F8

    ;
    ; Shifted
    ;
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +00
    .byte   $FF, $1B, '!', '@', '#', '$', '%', '^'      ; +08
    .byte   '&', '*', '(', ')', '_', '+', $08, $09      ; +10
    .byte   'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'      ; +18
    .byte   'O', 'P', '{', '}', $0D, $FF, 'A', 'S'      ; +20
    .byte   'D', 'F', 'G', 'H', 'J', 'K', 'L', ':'      ; +28
    .byte   '"', '~', $FF, '|', 'Z', 'X', 'C', 'V'      ; +30
    .byte   'B', 'N', 'M', '<', '>', '?', $FF, '*'      ; +38
    .byte   $FF, $20, $FF, $FF, $FF, $FF, $FF, $FF      ; +40
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, '7'      ; +48
    .byte   '8', '9', '-', '4', '5', '6', '+', '1'      ; +50
    .byte   '2', '3', '0', '.', $FF, $FF, $FF, $FF      ; +58
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +60
    .byte   $FF, $FF, $FF, $FF, $0D, $FF, $FF, $FF      ; +68
    .byte   '/', $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +70
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +78
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +80
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +88
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +90
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +98
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +A0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +A8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +B0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +B8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +C0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +C8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +D0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +D8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +E0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +E8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +F0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +F8

    ;
    ; controlled
    ;
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +00
    .byte   $FF, $1B, '1', $00, '3', '4', '5', '6'      ; +08
    .byte   '7', '8', '9', '0', '_', '+', $08, $09      ; +10
    .byte   $11, $17, $05, $12, $14, $19, $15, $09      ; +18
    .byte   $0F, $10, '{', '}', $0D, $FF, $01, $13      ; +20
    .byte   $04, $06, $07, $08, $0A, $0B, $0C, ':'      ; +28
    .byte   '"', '~', $FF, '|', $1A, $18, $03, $16      ; +30
    .byte   $02, $0E, $0D, '<', '>', '?', $FF, '*'      ; +38
    .byte   $FF, $20, $FF, $FF, $FF, $FF, $FF, $FF      ; +40
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, '7'      ; +48
    .byte   '8', '9', '-', '4', '5', '6', '+', '1'      ; +50
    .byte   '2', '3', '0', '.', $FF, $FF, $FF, $FF      ; +58
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +60
    .byte   $FF, $FF, $FF, $FF, $0D, $FF, $FF, $FF      ; +68
    .byte   '/', $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +70
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +78
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +80
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +88
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +90
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +98
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +A0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +A8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +B0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +B8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +C0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +C8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +D0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +D8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +E0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +E8
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +F0
    .byte   $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF      ; +F8
.endproc

