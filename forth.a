    .p816
    .a16
    .i16


    .include "hw/cpu.inc"


    ; from terminal.a
    .import tioAsciiCode
    .import tioCarriageReturn
    .import tioCursorLeft
    .import tioCursorRight
    .import tioGetKey
    .import tioShiftStatus
    .import tioTypeCharacter
    .import tioTypeString

    .import tioTypeHex16

    .segment "BSSEXT"

TIB_size = 79
TIB_addr:
    .res    TIB_size+1


    .rodata

coldSignOnMsg:
    .byte "Kestrel Forth V0"
coldSignOnLen = *-coldSignOnMsg

okMsg:
    .byte "   ok"
okLen = *-okMsg


    .code

.export forthColdBoot
.proc forthColdBoot
    ldx #coldSignOnMsg
    ldy #coldSignOnLen
    jsr tioTypeString
    jsr tioCarriageReturn
.endproc
    ; fall-through
.proc _QUIT
    ; DSP (X) undefined.  RSP (S) undefined.
    lda #$7FFF
    tcs
    lda #$0000
    tcd
    ldx #$0FE
    ; DSP and RSP reset to power-on values.

q:  jsr interpret
    jmp q
.endproc

.proc interpret
    sta 0,x
    dex
    dex
    lda #TIB_addr
    sta 0,x
    dex
    dex
    lda #TIB_size
    ; DS: 'TIB /TIB
    jsr _ACCEPT
    ; DS: span
    sta 0,x
    dex
    dex
    ldy #TIB_addr
    lda 2,x
    sty 2,x
    ; DS: 'TIB span
    jsr _EVALUATE
    ; DS:
    jsr i
    .byte "  ok"
i:  sta 0,x
    dex
    dex
    pla
    inc
    ; DS: "ok".addr
    sta 0,x
    dex
    dex
    lda #4
    ; DS: "ok".addr "ok".length
    jsr _TYPE
    jmp _CR
.endproc


.proc _CR
    jmp tioCarriageReturn
.endproc


.proc _TYPE
    ; DS: caddr length
    tay                 ; Y = length
    lda 2,x
    phx
    tax                 ; X = caddr
    jsr tioTypeString
    plx
    inx
    inx
    inx
    inx
    lda 0,x
    ; DS:
    rts
.endproc


.proc _EVALUATE
    ; DS: caddr u
    jsr tioCarriageReturn
    jmp _TYPE
    inx
    inx
    inx
    inx
    lda 0,x
    ; DS:
    rts
.endproc


.proc _ACCEPT
    ; DS: caddr uMAX
    pea 0
    pea 0
    ; DS: caddr uMAX
    ; RS: i=0 uACTUAL=0
    pha
    inx
    inx
    lda 0,x
    ; DS: caddr
    ; RS: uMAX i uACTUAL
    pha
    inx
    inx
    ; DS:
    ; RS: caddr uMAX i uACTUAL
    ; A free.
    phx
    phy
    phd

    ; RS: D Y X caddr uMAX i=0 uACTUAL=0
    tsc
    tcd

caddr   = 7     ; base address of storage buffer
uMAX    = 9     ; the total size of the buffer
i       = 11    ; the insertion offset into the buffer
uACTUAL = 13    ; the total string length inside the buffer

    ; i = uACTUAL = 0
a0: ; INVARIANT: 0 <= i <= uACTUAL <= uMAX
    jsr tioGetKey
    ; RS: D Y X caddr uMAX i uACTUAL
    ; A = raw keyboard event
    cmp #$8024
    beq onCR
    cmp #$8064
    beq onCursorLeft
    cmp #$8066
    beq onCursorRight
;   pha
;   jsr tioTypeHex16
;   pla
    ; A = raw keyboard event
    jsr tioAsciiCode
    ; A = -1 if untranslatable code; ASCII code otherwise
    bmi a0
    ; A = an ASCII character

    ; RS: D Y X caddr uMAX i uACTUAL
    ; A = an ASCII character
    cmp #$0020
    bcc a0
    ; A in printable subset
    ldy i
    cpy uACTUAL
    bcc insertOrOverwrite
    bne a0                  ; Illegal state: memory corruption imminent!  Prevent further damage.
    ; i = uACTUAL, thus we're...

appendingToBuffer:
    ; Y = i
    ; 0 <= i = uACTUAL <= uMAX
    cpy uMAX
    bcs a0                  ; i = uACTUAL = uMAX
    ; 0 <= i = uACTUAL < uMAX
    ; 0 <= i+1 = uACTUAL+1 <= uMAX
    inc uACTUAL
    ; 0 <= i+1 = uACTUAL <= uMAX
overwrite:
    A8X16
    sta (caddr),y
    AX16
    jsr tioTypeCharacter
    inc i
    ; 0 <= i = uACTUAL <= uMAX
    jmp a0


onCR:
    ; RS: D Y X caddr uMAX i uACTUAL
    pld
    ply
    plx
    pla
    pla
    pla
    pla
    ; DS: uACTUAL
    rts

onCursorLeft:
    ; 0 <= i <= uACTUAL <= uMAX
    lda i
    beq flushLeft   ; 0 = i
    ; 0 < i
    ; 0 <= i-1
    dec
    ; 0 <= i
    sta i
    jsr tioCursorLeft
flushLeft:
    ; 0 <= i < uACTUAL
    jmp a0

onCursorRight:
    ; 0 <= i <= uACTUAL <= uMAX
    lda i
    cmp uACTUAL
    beq flushRight  ; i = uACTUAL
    ; i < uACTUAL
    ; i+1 <= uACTUAL
    inc
    ; i <= uACTUAL
    sta i
    jsr tioCursorRight
flushRight:
    ; i <= uACTUAL
    jmp a0

insertOrOverwrite:
    ; 0 <= i < uACTUAL <= uMAX
    ; 0 <= i+1 <= uACTUAL <= uMAX
    ; A is in printable subset of ASCII set
    ; Y = i
    pha
    ; S = [character ...]
    jsr tioShiftStatus
    bit #$2000
    bne insert
    pla
    ; S = [...]
    jmp overwrite

insert:
    ; 0 <= i < uACTUAL <= uMAX
    ; 0 <= i+1 <= uACTUAL <= uMAX
    ; Y = i
    ; S = [character ...]

    lda uACTUAL
    cmp uMAX
    bne a1
    pla
    ; S = [,..]
    ; 0 <= i+1 <= uACTUAL = uMAX
    ; ignore typed characters to avoid memory corruption
    jmp a0

a1: ; buffer[0:uACTUAL] = text typed so far
    ; 0 <= i+1 <= uACTUAL < uMAX
    ; 0 <= i+1 <= uACTUAL+1 <= uMAX
    ; S = [character ...]

    lda uACTUAL
    dec
    clc
    adc caddr
    tax
    ; X = final source address
    txy
    iny
    ; Y = final destination address
    lda uACTUAL
    dec
    sec
    sbc i
    ; A = number of characters to move up in memory
    mvp 0,0
    ldy i
    ; buffer[0:i] = text typed
    ; buffer[i] = space
    ; buffer[i+1:uACTUAL] = text typed
    ; 0 <= i+1 <= uACTUAL+1 <= uMAX
    inc uACTUAL
    ; 0 <= i+1 <= uACTUAL <= uMAX
    pla
    ; 0 <= i+1 <= uACTUAL <= uMAX
    ; Y = i
    ; A = printable ASCII character
    jmp overwrite
.endproc

