    .p816
    .a16
    .i16


    .include "hw/cpu.inc"
    .include "vm.inc"


;
; A collection of procedures for rendering to a graphics bitmap.  Since we're
; working with a pretty stupid and minimal Forth environment, this module's
; name is perhaps misleading, as we're primarily concerned with textual output
; to the screen.
;


    .bss

_font:      .res 4
    ; pointer to a 2048x8 pixel bitmap containing the font to draw with.
    ; All glyphs are 8x8 pixels in size.

_frame:     .res 4
    ; pointer to the current bitmap.

_width:     .res 2
    ; The current character width of the bitmap.


    .code

.export _useFramebuffer
.proc _useFramebuffer
    st  _frame+2
    st  _frame
    rts
.endproc

.export _useFont
.proc _useFont
    st  _font+2
    st  _font
    rts
.endproc

.export _wide
.proc _wide
    st  _width
    rts
.endproc

.export _plotGlyph
.import _cursorOffsetInBitmap
.proc _plotGlyph
    ; Preconditions:
    ;   0 <= A < 256
    ;   _frame points to a valid framebuffer or suitably sized bitmap.
    ;   _font points to a 2048 x 8 bitmap containing character glyphs.

    pha
    phx
    phy
    phd

    ; S = [D, Y, X, A]

    lda _frame+2
    pha
    lda _frame
    pha

    lda _width
    jsr _cursorOffsetInBitmap
    clc
    adc 1,s
    sta 1,s
    lda #0
    adc 3,s
    sta 3,s

    ; S = [p, D, Y, X, A]

    lda _font+2
    pha
    lda _font
    clc
    adc 13,s    ; use character specified in A on entry
    pha

    tsc
    tcd

    ; S = [g, p, D, Y, X, A ]

p   =   5       ; bitmap pointer
g   =   1       ; glyph pointer

    ldx #8
    ldy #0

L1: ; invariant: X >= 1
    ;   y = 0
    ;   _font <= g < (_font + 2048)
    ;   _frame <= p < (_frame + size of bitmap)

    AX8
    lda [g],y
    sta [p],y
    AX16

    ;   ((X-1 > 0) & (g+256 < (_font + 2048))) | ((X-1 = 0) & (g+256 >= (_font + 2048)))
    inc g+1
    ;   ((X-1 > 0) & (g < (_font + 2048))) | ((X-1 = 0) & (g >= (_font + 2048)))

    ;   (p + _width) < (_frame + size of bitmap)
    clc
    lda _width
    adc p
    sta p
    ;   p < (_frame + size of bitmap)

    ;   ((X-1 > 0) & (g < (_font + 2048))) | ((X-1 = 0) & (g >= (_font + 2048)))
    dex 
    ;   ((X > 0) & (g < (_font + 2048))) | ((X = 0) & (g >= (_font + 2048)))
    bne L1
    ; X = 0 & g >= (_font + 2048) & S = [g, p, D, Y, X, A]

    ; S = [g, p, D, Y, X, A]
    tsc
    clc
    adc #8
    tcs
    ; S = [D, Y, X, A]

    pld
    ply
    plx
    pla
    rts
.endproc

