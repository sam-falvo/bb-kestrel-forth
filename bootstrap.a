    .p816
    .a16
    .i16

    .include "hw/cpu.inc"
    .include "hw/chipset.inc"


    .bss

    ; Count-down counter for cursor; after `blinker' frames, the state
    ; of the cursor toggles.
blinker:
    .res 2

    .code

.export __n_reset
.import tioInitialize
.import tioTypeCharacter
.import tioCarriageReturn
.import tioShowCursor
.import tioClear
.import tioHome
.import tioTypeString
.import tioGetKey
.import tioTypeHex16
.import tioShiftStatus
.import tioAsciiCode
.proc __n_reset
    ;; This is the native-mode cold-boot entry point.  This procedure
    ;; never returns.

    ; Preconditions:
    ;   S = $7FFF.
    ;   Interrupts disabled.
    ;   A, X, Y in 16-bit mode.
    ;   CPU in native mode.
    ;   RAM-resident exception/interrupt vector table initialized.

    jsr initializeIRQ
    cli
    jsr tioInitialize

    lda #1
    sta blinker
    jsr tioShowCursor

    jsr tioClear
    jsr tioHome
    ldx #Msg1
    ldy #Msg1Len
    jsr tioTypeString
    jsr tioCarriageReturn
    
L0: jsr tioGetKey
    jsr tioAsciiCode
    bmi L0
    jsr tioTypeCharacter
    jmp L0

Msg1:
    .byte "**** Kestrel Keyboard Demonstrator ****"
Msg1Len = *-Msg1

.endproc

.bss
buffer: .res 64
.code

.import nativeModeIRQVector
.proc initializeIRQ
    lda #globalIrqHandler
    sta nativeModeIRQVector

    lda #0
    sta IQPN
    lda #IQVRLI | IQKBMO
    sta IQEA
    rts

globalIrqHandler:
    php
    AX16
    phb
    pha
    phx
    phy

    pea 0
    plb
    plb

    jsr processPendingMgiaInterrupt
    jsr processPendingKeyboardInterrupt

    ply
    plx
    pla
    plb
    plp
    rti
.endproc


.import tioToggleCursor
.proc processPendingMgiaInterrupt
    lda IQPN
    bit #IQVRLI
    beq noPendingInterrupt

    ; acknowledge MGIA interrupt
    and #~IQVRLI
    sta IQPN

    ; reset fetch pointer to beginning of frame buffer
    lda #$0000
    sta VIDAPTL
    lda #$00FE
    sta VIDAPTH

    ; implement cursor blinking logic
    dec blinker
    bne done
    lda #30
    sta blinker
    jsr tioToggleCursor

done:
noPendingInterrupt:
    rts
.endproc

.import tioRawKeyEvent
.proc processPendingKeyboardInterrupt
    lda IQPN
    bit #IQKBMO
    beq noPendingKeyboardInterrupt
    and #~IQKBMO
    sta IQPN

    lda KBMOST
    and #$4000
    asl
    ora KBDA
    jsr tioRawKeyEvent

noPendingKeyboardInterrupt:
    rts
.endproc

