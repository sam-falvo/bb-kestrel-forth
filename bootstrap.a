    .p816
    .a16
    .i16

    .include "hw/cpu.inc"
    .include "hw/chipset.inc"


    .rodata

romFont:
    .incbin "font.bin"


    .code

.export __n_reset
.import _wide
.import _useFramebuffer
.import _useFont
.import _plotGlyph
.import _setWindowOrigin
.import _setWindowExtent
.import _setXY
.import _cursorRight
.import _typeCharacter
.import _carriageReturn
.proc __n_reset
    ;; This is the native-mode cold-boot entry point.  This procedure
    ;; never returns.

    ; Preconditions:
    ;   S = $7FFF.
    ;   Interrupts disabled.
    ;   A, X, Y in 16-bit mode.
    ;   CPU in native mode.
    ;   RAM-resident exception/interrupt vector table initialized.

    jsr initializeMGIA
    jsr initializeIRQ
    cli

    lda #80
    jsr _wide

    lda #0
    ldy #$FE
    jsr _useFramebuffer

    lda #romFont
    ldy #0
    jsr _useFont

    lda #0
    tay
    jsr _setWindowOrigin
    jsr _setXY

    lda #80
    ldy #60
    jsr _setWindowExtent


    lda #0
L1: jsr _typeCharacter
    inc
    bne L1
    jsr _carriageReturn
    jmp L1
.endproc


.proc initializeMGIA
    ;; Initializes the Monochrome Graphics Interface Adapter.
    ;; The MGIA was originally specified for implementation in an
    ;; FPGA; hence, programming the emulator's version of it resembles
    ;; a more traditional video chip.  In reality, it remains to be seen
    ;; if an FPGA will provide the functionality, or if a SEAforth chip
    ;; will.  If the latter, this code will change markedly.

    lda #800                ; Set CRTC for VGA monitor, 60Hz refresh
    sta CCHZTL
    lda #525
    sta CCVRTL
    lda #$025F
    sta CCSYWD

    lda #140                ; Set display to center of the display
    sta VIHZST              ; (hopefully)
    lda #780
    sta VIHZEN
    lda #34
    sta VIVRST
    lda #514
    sta VIVREN

    inc                     ; Set raster line for display interrupt
    sta CCVRLI
    rts
.endproc


.import nativeModeIRQVector
.proc initializeIRQ
    lda #globalIrqHandler
    sta nativeModeIRQVector

    lda #0
    sta IQPN
    lda #IQVRLI
    sta IQEA
    rts

globalIrqHandler:
    php
    AX16
    pha
    phx
    phy

    jsr processPendingMgiaInterrupt

    ply
    plx
    pla
    plp
    rti
.endproc


.proc processPendingMgiaInterrupt
    lda IQPN
    bit #IQVRLI
    beq noPendingInterrupt

    and #~IQVRLI
    sta IQPN

    lda #$0000
    sta VIDAPTL
    lda #$00FE
    sta VIDAPTH

noPendingInterrupt:
    rts
.endproc

